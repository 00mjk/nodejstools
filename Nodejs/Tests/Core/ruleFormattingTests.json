{ input: "function a() {\r\nvar b  =  0;//}\r\n}", operations: [ { operation: "CloseBrace", point: { position: 31 } } ], expected: "function a() {\r\nvar b  =  0;//}\r\n}" },
{ input: " if ( a[\";\"])\r\nb++;", operations: [ { operation: "Semicolon", point: { position: 10 } } ], expected: " if ( a[\";\"])\r\nb++;" },
{ input: "(function () {\r\n    a({\r\n        b: 0\r\n    });\r\n\r\n})();", operations: [ { operation: "Enter", point: { position: 48 } } ], expected: "(function () {\r\n    a({\r\n        b: 0\r\n    });\r\n\r\n})();" },
{ input: "if(1)if(1)if(1)if(1)x+=2;", operations: [ { operation: "Semicolon", point: { position: 25 } } ], expected: "if (1) if (1) if (1) if (1) x += 2;" },
{ input: "function f(x){ return x }\nwhile (f(true))\n    y++;\n", operations: [ { operation: "Enter", point: { position: 51 } } ], expected: "function f(x){ return x }\nwhile (f(true))\n    y++;\n" },
{ input: "throw     e;", operations: [ { operation: "Document" } ], expected: "throw e;" },
{ input: "return         1;", operations: [ { operation: "Document" } ], expected: "return 1;" },
{ input: "var x = [\n    1,\n    2,\n    3\n]", operations: [ { operation: "Document" } ], expected: "var x = [\n    1,\n    2,\n    3\n]" },
{ input: "label1:\r\nvar a;\r\nvar b;", operations: [ { operation: "Document" } ], expected: "label1:\r\n    var a;\r\nvar b;" },
{ input: "\r\nfunction a() {\r\nfunction test() // test\r\n{\r\nif (test) // test\r\n{\r\n}\r\n}\r\n}", operations: [ { operation: "Document" } ], expected: "\r\nfunction a() {\r\n    function test() // test\r\n    {\r\n        if (test) // test\r\n        {\r\n        }\r\n    }\r\n}" },
{ input: "var obj = {\r\na:{\r\nb:2,c:{\r\nd: {\r\ne: function f() {\r\nreturn obj.a.c.d.e() +f();\r\n}\r\n}\r\n}\r\n}\r\n};", operations: [ { operation: "Semicolon", point: { position: 94 } } ], expected: "var obj = {\r\n    a: {\r\n        b: 2, c: {\r\n            d: {\r\n                e: function f() {\r\n                    return obj.a.c.d.e() + f();\r\n                }\r\n            }\r\n        }\r\n    }\r\n};" },
{ input: "{ var b;\n}", operations: [ { operation: "Document" } ], expected: "{\n    var b;\n}" },
{ input: "var z =    {\na: 1};", operations: [ { operation: "Document" } ], expected: "var z = {\n    a: 1\n};" },
{ input: "for (var i = 0; i < 10; i++)\n   { var a\n}", operations: [ { operation: "Document" } ], expected: "for (var i = 0; i < 10; i++) {\n    var a\n}" },
{ input: "if (1)\n     {\nvar a }", operations: [ { operation: "Document" } ], expected: "if (1) {\n    var a\n}" },
{ input: "while (1)\n      { var a\n}", operations: [ { operation: "Document" } ], expected: "while (1) {\n    var a\n}" },
{ input: "do\n     { var a\n}   while (1)", operations: [ { operation: "Document" } ], expected: "do {\n    var a\n} while (1)" },
{ input: "for (var a in b)\n      { var a\n}", operations: [ { operation: "Document" } ], expected: "for (var a in b) {\n    var a\n}" },
{ input: "with (x)\n       { var a\n}", operations: [ { operation: "Document" } ], expected: "with (x) {\n    var a\n}" },
{ input: "try\n        { var a\n}\ncatch (e)\n         { var a\n}\nfinally\n   {\n}", operations: [ { operation: "Document" } ], expected: "try {\n    var a\n}\ncatch (e) {\n    var a\n}\nfinally {\n}" },
{ input: "switch (x)\n     { case 1:   { var a }\n}", operations: [ { operation: "Document" } ], expected: "switch (x) {\n    case 1: { var a }\n}" },
{ input: "function f()\n       { var x\n}", operations: [ { operation: "Document" } ], expected: "function f() {\n    var x\n}" },
{ input: "if(1)if(1)if(1)if(1){x+=2\r\n}", operations: [ { operation: "CloseBrace", point: { position: 28 } } ], expected: "if (1) if (1) if (1) if (1) {\n    x += 2\r\n}" },
{ input: "switch (a){\r\n    case 1: x += 2;\r\n case   2  : \r\n     for (var i=0;i<10;i++)\r\ni  --;\r\n}\r\n", operations: [ { operation: "Semicolon", point: { position: 84 } } ], expected: "switch (a){\r\n    case 1: x += 2;\r\n    case 2:\r\n        for (var i = 0; i < 10; i++)\r\n            i--;\r\n}\r\n" },

{ input: "if (a   instanceof      b) { }", operations: [ { operation: "Document" } ], expected: "if (a instanceof b) { }" },
{ input: "do               a++; while (0)", operations: [ { operation: "Document" } ], expected: "do a++; while (0)" },
{ input: "foo\r\n(1, 2, 3)", operations: [ { operation: "Document" } ], expected: "foo\r\n(1, 2, 3)" },
{ input: "if(1) //comment\r\n{\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "if (1) //comment\r\n{\r\n}\r\n" },
{ input: "x = [\r\n    1,\r\n\r\n]", operations: [ { operation: "Enter", point: { position: 15 } } ], expected: "x = [\r\n    1,\r\n\r\n]" },
{ input: "for(var i=0;i<10;i++){for(var j=0;j<10;j++){j-=i}}", operations: [ { operation: "CloseBrace", point: { position: 50 } } ], expected: "for (var i = 0; i < 10; i++) { for (var j = 0; j < 10; j++) { j -= i } }" },
{ input: "function f()\n{\n    for (a in b)\n    a++;\n}", operations: [ { operation: "Semicolon", point: { position: 40 } } ], expected: "function f()\n{\n    for (a in b)\n        a++;\n}" },
{ input: "switch (a){\r\ncase   1   :   x+=2 ;    break;\r\n    case 2:{\r\n    }\r\n}\r\n", operations: [ { operation: "Semicolon", point: { position: 44 } } ], expected: "switch (a){\r\n    case 1: x += 2; break;\r\n    case 2:{\r\n    }\r\n}\r\n" },
{ input: "if (true) {\r\n    \r\n}", operations: [ { operation: "Document" } ], expected: "if (true) {\r\n    \r\n}" },
{ input: "for(var j=0;j<10;j++)\r\nj-=i;", operations: [ { operation: "Semicolon", point: { position: 28 } } ], expected: "for (var j = 0; j < 10; j++)\r\n    j -= i;" },
{ input: "function a() {\r\n    function b() {\r\n        //\r\n\r\n    }\r\n}", operations: [ { operation: "Enter", point: { position: 48 } } ], expected: "function a() {\r\n    function b() {\r\n        //\r\n\r\n    }\r\n}" },
{ input: "foo(\r\n)", operations: [ { operation: "Document" } ], expected: "foo(\r\n)" },
{ input: "function f() {\r\n'use strict';\r\n}", operations: [ { operation: "Semicolon", point: { position: 29 } } ], expected: "function f() {\r\n    'use strict';\r\n}" },
{ input: "var x = function() {\n//comment\nreturn 1;\n}", operations: [ { operation: "Document" } ], expected: "var x = function() {\n    //comment\n    return 1;\n}" },
{ input: "if (true)\n// test\n    test;", operations: [ { operation: "Document" } ], expected: "if (true)\n    // test\n    test;" },
{ input: " var a  =  0 ;", operations: [ { operation: "Semicolon", point: { position: 14 } } ], expected: "var a = 0;" },
{ input: "var obj = {\r\na: {\r\nb: 2, c: {\r\nd: {\r\ne: function f() {\r\nreturn obj.a.c.d.e() + f();\r\n}\r\n}\r\n}\r\n}}", operations: [ { operation: "CloseBrace", point: { position: 96 } } ], expected: "var obj = {\r\n    a: {\r\n        b: 2, c: {\r\n            d: {\r\n                e: function f() {\r\n                    return obj.a.c.d.e() + f();\r\n                }\r\n            }\r\n        }\r\n    }\n}" },
{ input: "if (x!=1^y===2){   x+=2}", operations: [ { operation: "CloseBrace", point: { position: 24 } } ], expected: "if (x != 1 ^ y === 2) { x += 2 }" },
{ input: "{\r\n    try {\r\n    } catch (e) {\r\n    }\r\n}", operations: [ { operation: "Document" } ], expected: "{\r\n    try {\r\n    } catch (e) {\r\n    }\r\n}" },
{ input: "for (a      in          b) { }", operations: [ { operation: "Document" } ], expected: "for (a in b) { }" },
{ input: " if ( a[\"}\"])\r\nb++;", operations: [ { operation: "CloseBrace", point: { position: 10 } } ], expected: " if ( a[\"}\"])\r\nb++;" },
{ input: "$    (   document   )   .  ready  (   function   (   )   {   \n    alert    (           \"i am ready\"  )   ;\n           }                 );", operations: [ { operation: "Semicolon", point: { position: 138 } } ], expected: "$(document).ready(function() {\n    alert(\"i am ready\");\n});" },
{ input: "function f() {\r\nvar s=\"string\";\r\n}", operations: [ { operation: "Semicolon", point: { position: 31 } } ], expected: "function f() {\r\n    var s = \"string\";\r\n}" },
{ input: "for(var i=0;i<10;i++){for(var j=0;j<10;j++){j-=i}}", operations: [ { operation: "CloseBrace", point: { position: 49 } } ], expected: "for(var i=0;i<10;i++){ for (var j = 0; j < 10; j++) { j -= i }}" },
{ input: "function a()\r\n{\r\n}", operations: [ { operation: "Enter", point: { position: 14 } } ], expected: "function a()\r\n{\r\n}" },
{ input: " \r\nfunction a() { \r\n    return; \r\n} \r\n ", operations: [ { operation: "Document" } ], expected: "\r\nfunction a() {\r\n    return;\r\n}\r\n" },
{ input: "foo(\r\n1, 2, 3)", operations: [ { operation: "Document" } ], expected: "foo(\r\n    1, 2, 3)" },
{ input: "function Init() {\r\n    var a = [[1, 2],\r\n        [3, 4],\r\n\r\n    ];\r\n}", operations: [ { operation: "Enter", point: { position: 58 } } ], expected: "function Init() {\r\n    var a = [[1, 2],\r\n        [3, 4],\r\n\r\n    ];\r\n}" },
{ input: "\r\n    //function start\r\n    function abc() { }\r\n    //function end\r\n", operations: [ { operation: "Document" } ], expected: "\r\n//function start\r\nfunction abc() { }\r\n//function end\r\n" },
{ input: "// JScript source code\r\nfunction adder(a, b) {\r\n    ///<summary>Adds two numbers </summary>\r\n    return a + b;\r\n}\r\n", operations: [ { operation: "Enter", point: { position: 94 } } ], expected: "// JScript source code\r\nfunction adder(a, b) {\r\n    ///<summary>Adds two numbers </summary>\r\n    return a + b;\r\n}\r\n" },
{ input: "if(1)if(1)if(1)if(1){x+=2}", operations: [ { operation: "CloseBrace", point: { position: 26 } } ], expected: "if (1) if (1) if (1) if (1) { x += 2 }" },
{ input: "if (x!=1^y===2){   x+=2\r\n}", operations: [ { operation: "CloseBrace", point: { position: 26 } } ], expected: "if (x != 1 ^ y === 2) {\n    x += 2\r\n}" },
{ input: "var d = new     Date    ()", operations: [ { operation: "Document" } ], expected: "var d = new Date()" },
{ input: "do {\r\n}                       while (1 == 10);", operations: [ { operation: "Document" } ], expected: "do {\r\n} while (1 == 10);" },
{ input: "string='string+=2';", operations: [ { operation: "Semicolon", point: { position: 19 } } ], expected: "string = 'string+=2';" },
{ input: "try // comment\r\n{\r\n}\r\ncatch  (e) // comment\r\n{\r\n}\r\nfinally // comment\r\n{\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "try // comment\r\n{\r\n}\r\ncatch (e) // comment\r\n{\r\n}\r\nfinally // comment\r\n{\r\n}\r\n" },
{ input: "if (a)\r\ntest;\r\nelse if (b)\r\ntest;", operations: [ { operation: "Document" } ], expected: "if (a)\r\n    test;\r\nelse if (b)\r\n    test;" },
{ input: "foo(1, 2, 3\r\n)", operations: [ { operation: "Document" } ], expected: "foo(1, 2, 3\r\n)" },
{ input: "\r\nswitch (a){\r\n  case     1: x++;\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\nswitch (a) {\r\n    case 1: x++;\r\n}\r\n" },
{ input: "switch (a) {\n    case 1: b++;\n        break;\n\n    default: a++;\n        break;\n}", operations: [ { operation: "Enter", point: { position: 45 } } ], expected: "switch (a) {\n    case 1: b++;\n        break;\n\n    default: a++;\n        break;\n}" },
{ input: "string='string+=2;'", operations: [ { operation: "Semicolon", point: { position: 18 } } ], expected: "string='string+=2;'" },
{ input: "switch   ( a )   {\r\n    case 1: x+=2;\r\n case 2:{for(var i=0;i<10;i++){ \r\nx+=2;}\r\n    }\r\n}", operations: [ { operation: "CloseBrace", point: { position: 89 } } ], expected: "switch (a) {\r\n    case 1: x += 2;\r\n    case 2: {\n        for (var i = 0; i < 10; i++) {\r\n            x += 2;\n        }\r\n    }\r\n}" },
{ input: "do{\r\nfor(var i=0;i<10;i++)\r\ni-=2;\r\n}while(1!==1)", operations: [ { operation: "Semicolon", point: { position: 33 } } ], expected: "do{\r\n    for (var i = 0; i < 10; i++)\r\n        i -= 2;\r\n}while(1!==1)" },
{ input: "function f () //comment\r\n{\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "function f() //comment\r\n{\r\n}\r\n" },
{ input: "function a(b) {\r\n    var c = 0;\r\n    if (b != null) {\r\n        for (d in b) {\r\n        }\r\n   }\r\n}", operations: [ { operation: "CloseBrace", point: { position: 94 } } ], expected: "function a(b) {\r\n    var c = 0;\r\n    if (b != null) {\r\n        for (d in b) {\r\n        }\r\n    }\r\n}" },
{ input: "var x = {\n//comment\na: 1\n}", operations: [ { operation: "Document" } ], expected: "var x = {\n    //comment\n    a: 1\n}" },
{ input: "function f() {\n    var x }", operations: [ { operation: "Document" } ], expected: "function f() {\n    var x\n}" },
{ input: "function add(a, b) { return a + b}", operations: [ { operation: "Document" } ], expected: "function add(a, b) { return a + b }" },
{ input: "var a = function (b) {\r\nb = 0;\r\n}", operations: [ { operation: "CloseBrace", point: { position: 33 } } ], expected: "var a = function(b) {\r\n    b = 0;\r\n}" },
{ input: "\r\nif (\r\n        test) {\r\n                        a;\r\n}\r\n", operations: [ { operation: "Document" } ], expected: "\r\nif (\r\n        test) {\r\n    a;\r\n}\r\n" },
{ input: "(function () {\r\n    a({\r\n        b: 0\r\n    });\r\n})();", operations: [ { operation: "Document" } ], expected: "(function() {\r\n    a({\r\n        b: 0\r\n    });\r\n})();" },
{ input: "function a() {\r\n    /**/ }", operations: [ { operation: "Document" } ], expected: "function a() {\r\n    /**/\n}" },
{ input: "function f() {\r\n    var x; /*\r\n       */ var y = 2;\r\n}", operations: [ { operation: "Document" } ], expected: "function f() {\r\n    var x; /*\r\n       */ var y = 2;\r\n}" },
{ input: "foo  (1, 2, 3)", operations: [ { operation: "Document" } ], expected: "foo(1, 2, 3)" },
{ input: "if (typeof      a == null);", operations: [ { operation: "Document" } ], expected: "if (typeof a == null);" },
{ input: "void         x;", operations: [ { operation: "Document" } ], expected: "void x;" },
{ input: "if (1)\r\n    x++;\r\nelse             if (1)\r\n    x--;", operations: [ { operation: "Document" } ], expected: "if (1)\r\n    x++;\r\nelse if (1)\r\n    x--;" },
{ input: "x = {\n    get         foo        () {\n    },\n    set          foo        (val) {\n    }\n};", operations: [ { operation: "Document" } ], expected: "x = {\n    get foo() {\n    },\n    set foo(val) {\n    }\n};" }
