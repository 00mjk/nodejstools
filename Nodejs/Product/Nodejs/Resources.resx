<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LaunchUrlToolTip" xml:space="preserve">
    <value>Specifies the URL to open in the browser.  If unspecified http://localhost:port is used.\r\nIf a port is specified, it needs to be specified here as well.</value>
  </data>
  <data name="NodeExeArguments" xml:space="preserve">
    <value>Arguments to Node.exe</value>
  </data>
  <data name="NodeExeArgumentsDescription" xml:space="preserve">
    <value>Specifies the options provided to node.exe, such as -e or -i.</value>
  </data>
  <data name="NodeExeArgumentsToolTip" xml:space="preserve">
    <value>Specifies the options provided to node.exe, such as -e or -i.</value>
  </data>
  <data name="NodeExePath" xml:space="preserve">
    <value>Node.exe path</value>
  </data>
  <data name="NodeExePathToolTip" xml:space="preserve">
    <value>Specifies the path to the node.exe executable.</value>
  </data>
  <data name="NodejsPort" xml:space="preserve">
    <value>Node.js Port</value>
  </data>
  <data name="NodejsNotInstalled" xml:space="preserve">
    <value>Node.js does not appear to be installed.  Please download and install Node.js or configure a projects properties page so that it points to where you have installed node.exe.</value>
  </data>
  <data name="NodejsPortToolTip" xml:space="preserve">
    <value>Specifies the port number used for process.env.port, if unspecified a random port is generated.</value>
  </data>
  <data name="ScriptArgumentsToolTip" xml:space="preserve">
    <value>Specifies the arguments passed to the script on launch.</value>
  </data>
  <data name="StartBrowserToolTip" xml:space="preserve">
    <value>When checked a web browser is opened on launch</value>
  </data>
  <data name="WorkingDirToolTip" xml:space="preserve">
    <value>Specifies the working directory where the node.exe process is launched.</value>
  </data>
  <data name="NodeExeDoesntExist" xml:space="preserve">
    <value>Your project is currently configured to look for Node.exe at "{0}" but the file does not exist.</value>
  </data>
  <data name="NodejsToolsForVisualStudio" xml:space="preserve">
    <value>Node.js Tools for Visual Studio</value>
  </data>
  <data name="NodeExePathNotFound" xml:space="preserve">
    <value>The specified Node.js interpreter does not exist.</value>
  </data>
  <data name="NodejsNotInstalledShort" xml:space="preserve">
    <value>Node.js has not been detected on your computer</value>
    <comment>Used in general property page when Node.exe isn't found</comment>
  </data>
  <data name="InvalidPortNumber" xml:space="preserve">
    <value>Invalid port number - the port should contain only digits.</value>
  </data>
  <data name="WorkingDirInvalidOrMissing" xml:space="preserve">
    <value>The specified working directory is invalid or missing.</value>
  </data>
  <data name="PackageCatalogRefreshing" xml:space="preserve">
    <value>Currently refreshing</value>
  </data>
  <data name="PackageCatalogRefreshNever" xml:space="preserve">
    <value>Never</value>
  </data>
  <data name="PackageCatalogRefreshODays" xml:space="preserve">
    <value>Today at {0}</value>
  </data>
  <data name="PackageCatalogRefresh1Day" xml:space="preserve">
    <value>Yesterday at {0}</value>
  </data>
  <data name="PackageCatalogRefresh2To7Days" xml:space="preserve">
    <value>{0} days ago</value>
  </data>
  <data name="PackageCatalogRefresh1Week" xml:space="preserve">
    <value>More than 1 week ago</value>
  </data>
  <data name="PackageCatalogRefresh2Weeks" xml:space="preserve">
    <value>More than 2 weeks ago</value>
  </data>
  <data name="PackageCatalogRefresh3Weeks" xml:space="preserve">
    <value>More than 3 weeks ago</value>
  </data>
  <data name="PackageCatalogRefresh1Month" xml:space="preserve">
    <value>More than 1 month ago</value>
  </data>
  <data name="PackageCatalogRefresh3Months" xml:space="preserve">
    <value>More than 3 months ago</value>
  </data>
  <data name="PackageCatalogRefresh6Months" xml:space="preserve">
    <value>Far too long ago</value>
  </data>
  <data name="NpmCancelledWithErrors" xml:space="preserve">
    <value>{0} cancelled with errors - see Output window for details</value>
  </data>
  <data name="NpmCompletedWithErrors" xml:space="preserve">
    <value>{0} completed with errors - see Output window for details</value>
  </data>
  <data name="NpmCancelled" xml:space="preserve">
    <value>{0} cancelled</value>
  </data>
  <data name="NpmSuccessfullyCompleted" xml:space="preserve">
    <value>{0} successfully completed</value>
  </data>
</root>