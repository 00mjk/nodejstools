<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">10.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
  </PropertyGroup>

  <!-- *********************************************************************************** -->
  <!-- Normal install environment, use the current version -->
  <PropertyGroup Condition="$(NTVS_DEV) == '' and $(MSBuildThisFile)!='Microsoft.NodejsTools.Developer.targets'">
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <NodejsSupportPath>$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\Node.js Tools\</NodejsSupportPath>
    <PTVSSupportPath>$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\Node.js Tools\</PTVSSupportPath>
  </PropertyGroup>
  <!-- *********************************************************************************** -->
  <!-- Dev environment for PTVS, use the current version -->
  <PropertyGroup Condition="$(NTVS_DEV) == 'true' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'">
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <NodejsSupportVersion>0.5</NodejsSupportVersion>
    <NodejsSupportPath
      Condition="Exists('$(LOCALAPPDATA)\Microsoft\VisualStudio\$(VisualStudioVersion)Exp\Extensions\Microsoft\Node.js Tools for Visual Studio, Django Support\$(NodejsSupportVersion)\wfastcgi.py')">$(LOCALAPPDATA)\Microsoft\VisualStudio\$(VisualStudioVersion)Exp\Extensions\Microsoft\Node.js Tools for Visual Studio, Django Support\$(NodejsSupportVersion)\</NodejsSupportPath>

    <PTVSSupportPath
      Condition="Exists('$(LOCALAPPDATA)\Microsoft\VisualStudio\$(VisualStudioVersion)Exp\Extensions\Microsoft\Node.js Tools for Visual Studio\$(NodejsSupportVersion)\WebPICmdLine.exe')">$(LOCALAPPDATA)\Microsoft\VisualStudio\$(VisualStudioVersion)Exp\Extensions\Microsoft\Node.js Tools for Visual Studio\$(NodejsSupportVersion)\</PTVSSupportPath>
  </PropertyGroup>

  <Target Name="GetTargetFrameworkVersion" Returns="$(TargetFrameworkVersion)" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>
  <Target Name="GetTargetFrameworkDirectories" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>
  <Target Name="GetTargetFrameworkMoniker" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>
  <Target Name="GetTargetFrameworkMonikerDisplayName" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>
  <Target Name="CreateManifestResourceNames" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>

  <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>

  <Target Name="Build">
    <Message Text="Content=@(Content->'%(RelativeDir)%(Filename)%(Extension)')"/>
    <Copy
        SourceFiles="@(Compile)"
        DestinationFiles="@(Compile->'$(IntermediateOutputPath)%(RelativeDir)%(Filename)%(Extension)')"
        SkipUnchangedFiles="true">
      <!-- <Output TaskParameter="DestinationFiles" ItemName="FilesCopiedToIntermediate"/> -->
    </Copy>
    <Copy SourceFiles="@(Include)"
          DestinationFiles="@(Include->'$(IntermediateOutputPath)%(RelativeDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true">
      <!-- <Output TaskParameter="DestinationFiles" ItemName="FilesCopiedToIntermediate"/> -->
    </Copy>
    <Copy SourceFiles="@(Content)"
          DestinationFiles="@(Content->'$(IntermediateOutputPath)%(RelativeDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true">
      <!-- <Output TaskParameter="DestinationFiles" ItemName="FilesCopiedToIntermediate"/> -->
    </Copy>
  </Target>
  
  <Target
    Name="GetTargetPath"
    DependsOnTargets="Build"
    Returns="@(ScriptAndWebDeployFiles)"
    Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"
    >
    <Warning Text="!!!!!!!!! USING DEVELOPMENT VERSION OF Microsoft.NodejsTools.targets" Condition="$(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>

    <ItemGroup>
      <ScriptAndWebDeployFiles Include="@(FilesCopiedToIntermediate->'%(RootDir)%(Directory)%(Filename)%(Extension)')"/>
      <NodejsBinFiles Include="bin\**\*" />
      <ScriptAndWebDeployFiles Include="@(NodejsBinFiles->'%(RootDir)%(Directory)%(Filename)%(Extension)')"/>
    </ItemGroup>
    <Message Text="ScriptAndWebDeployFiles=@(ScriptAndWebDeployFiles)"  />
  </Target>
  <Target Name="WatGetTargetFrameworkDirectories" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'" />
  <Target Name="BuiltProjectOutputGroupDependencies" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'" />
  <Target Name="WatGetTargetFrameworkMoniker" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>
  <Target Name="WatGetTargetFrameworkMonikerDisplayName" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'" />

  <PropertyGroup>
    <CleanWPPAllFilesInSingleFolder Condition="'$(CleanWPPAllFilesInSingleFolder)' == ''">false</CleanWPPAllFilesInSingleFolder>
  </PropertyGroup>
  
  <Import Project="$(VSToolsPath)\WebApplications\Microsoft.WebApplication.targets" Condition="'$(VSToolsPath)' != ''" />

  <Target
    Name="PipelineTransformPhase"
    DependsOnTargets="Build"
    Returns="@(TransformedFilenames)"
    >
    <!-- Target used for generating a package which can be uploaded to web server -->
    <ItemGroup>
      <_FoundWebConfig Include="@(Content)" Condition=" '%(Content.Filename)%(Content.Extension)' == 'web.config' " />
      <_FoundWebConfig Include="@(Include)" Condition=" '%(Content.Filename)%(Content.Extension)' == 'web.config' " />
    </ItemGroup>
    <Error 
      Text="web.config not found in project, to create a project to deploy to Windows Azure you must create a Windows Azure Node.js project." 
      Condition="'@(_FoundWebConfig)' == ''"/>
    <ItemGroup>
      <ContentFiles Include="@(Content)"></ContentFiles>
      <ContentFiles Include="@(Compile)"></ContentFiles>
      <ContentFiles Include="@(Include)"></ContentFiles>

      <TransformedFilenames Include="@(ContentFiles->'%(FullPath)')">
        <DestinationRelativePath>%(RelativeDir)%(Filename)%(Extension)</DestinationRelativePath>
        <Exclude>false</Exclude>
        <FromTarget>Unknown</FromTarget>
        <Category>Run</Category>
        <ProjectFileType>Default</ProjectFileType>
      </TransformedFilenames>
    </ItemGroup>
  </Target>

  <Target Name="GenerateManifests" Returns="" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'"/>
  <Target Name="PrepareForBuild" DependsOnTargets="$(PrepareForBuildDependsOn)" Condition="$(NTVS_DEV) == '' or $(MSBuildThisFile)=='Microsoft.NodejsTools.Developer.targets'">
    <!-- 
        These CreateProperty calls are required because TargetDir and TargetPath are defined 
        to contain an item list. We want that item list to be expanded so that it can be used
        as a regular property value and not as an item-list-with-transform.
        -->
    <!-- 
        Choose exactly one app.config to be the main app.config that is copied to the destination folder. 
        
        The search order is:
        
            (1) Choose the value $(AppConfig) set in the main project.
            (2) Choose @(None) App.Config in the same folder as the project.
            (3) Choose @(Content) App.Config in the same folder as the project.
            (4) Choose @(None) App.Config in any subfolder in the project.
            (5) Choose @(Content) App.Config in any subfolder in the project.
        
        If an app.config is not found in one of these locations then there is no app.config for this project.
        -->
    <CreateProperty Value="%(None.Identity)" Condition="'$(AppConfig)'=='' and '%(RelativeDir)%(Filename)%(Extension)'=='App.Config'">
      <Output TaskParameter="Value" PropertyName="AppConfig" />
    </CreateProperty>
    <CreateProperty Value="%(Content.Identity)" Condition="'$(AppConfig)'=='' and '%(RelativeDir)%(Filename)%(Extension)'=='App.Config'">
      <Output TaskParameter="Value" PropertyName="AppConfig" />
    </CreateProperty>
    <CreateProperty Value="%(None.Identity)" Condition="'$(AppConfig)'=='' and '%(Filename)%(Extension)'=='App.Config'">
      <Output TaskParameter="Value" PropertyName="AppConfig" />
    </CreateProperty>
    <CreateProperty Value="%(Content.Identity)" Condition="'$(AppConfig)'=='' and '%(Filename)%(Extension)'=='App.Config'">
      <Output TaskParameter="Value" PropertyName="AppConfig" />
    </CreateProperty>
    <!-- Dump the single app.config into an item list with TargetPath set. -->
    <CreateItem Include="$(AppConfig)" AdditionalMetadata="TargetPath=$(TargetFileName).config">
      <Output TaskParameter="Include" ItemName="AppConfigWithTargetPath" />
    </CreateItem>
    <!-- Create the directories for intermediate and final build products. -->
    <MakeDir Directories="$(OutDir);$(IntermediateOutputPath);@(DocFileItem->'%(RelativeDir)')" />
  </Target>

  <!-- ##################################################################################### -->
  <!-- Web Publishing support -->
  <!-- Web applications use this for publishing, but we don't have an intermediate assembly. -->
  <Target Name="CollectFilesFromIntermediateAssembly"
      DependsOnTargets="$(CollectFilesFromIntermediateAssemblyDependsOn)"
      Condition="'@(IntermediateAssembly)'!=''">
  </Target>

  <ItemGroup>
    <!-- Node.js compile files are actually content -->
    <Content Include="@(Compile)" />
  </ItemGroup>

 
  <Import Project="$(NodejsSupportPath)Microsoft.NodejsTools.Developer.targets" Condition="$(NTVS_DEV) == 'true' and $(MSBuildThisFile)=='Microsoft.NodejsTools.targets'"/>
</Project>